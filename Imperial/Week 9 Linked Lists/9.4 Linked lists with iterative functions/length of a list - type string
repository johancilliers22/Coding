#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
 
typedef std::string list_t;
 
// using typedef we can change the type only in one line
// if we want a linked list implementation 
// that works for a different type
 
struct ListNode{
    list_t val;
    ListNode* next;
};
 
ListNode* cons_list(list_t e, ListNode* l){
    ListNode* tmp;
 
    tmp = new ListNode;
 
    tmp->val = e;
    tmp->next = l;
 
    return tmp;
}
 
void print_list(ListNode* l){
    while(l != NULL){
        std::cout << l->val << std::endl;
        l = l->next;
    }
}
 
void deallocate_list(ListNode* l){
    ListNode* tmp;
 
    while(l != NULL){
        tmp = l->next;
        delete l;
        l = tmp;
    }
}

int length_list(ListNode* l){
    int k = 0;
    while(l != NULL){
        k++;
        l=l->next;
    }
    std::cout<<"List length: "<<k<<std::endl;
    return k;
}
 
int main(){
    ListNode* l = NULL;

    std::ifstream infile; 
    infile.open("listwords.txt");

    std::vector<std::string> v;
 
    if(!infile.is_open()){ 
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    std::string temp;
 
    while(infile >> temp){
        v.push_back(temp); 
        // instead of printing the values
        // as in the example above
        // first we store them in a vector
    }
    int i;
    int n = v.size();
    for(i=n-1;i>-1;i--){
      l = cons_list(v[i], l);
    }
    infile.close(); 
 
    print_list(l);

    length_list(l);
 
 
    deallocate_list(l);
}