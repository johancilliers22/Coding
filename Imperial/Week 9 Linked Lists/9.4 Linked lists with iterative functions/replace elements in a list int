#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
 
typedef int list_t;
 
// using typedef we can change the type only in one line
// if we want a linked list implementation 
// that works for a different type
 
struct ListNode{
    list_t val;
    ListNode* next;
};
 
ListNode* cons_list(list_t e, ListNode* l){
    ListNode* tmp;
 
    tmp = new ListNode;
 
    tmp->val = e;
    tmp->next = l;
 
    return tmp;
}
 
void print_list(ListNode* l){
    while(l != NULL){
        std::cout << l->val << std::endl;
        l = l->next;
    }
}
 
void deallocate_list(ListNode* l){
    ListNode* tmp;
 
    while(l != NULL){
        tmp = l->next;
        delete l;
        l = tmp;
    }
}

bool replace_list(list_t e, list_t n, ListNode* l, bool all){
    int replacement = 0;
    while(l != NULL){
        if(l->val == e){
            replacement++;
            l->val = n;  
        }
        l=l->next;
    }
    if(replacement>0){
        return true;
    }
    else{
        return false;
    }
}
 
int main(){
    ListNode* l = NULL;

    std::ifstream infile; 
    infile.open("list.txt");

    std::vector<int> v;
 
    if(!infile.is_open()){ 
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    int temp;
 
    while(infile >> temp){
        v.push_back(temp); 
        // instead of printing the values
        // as in the example above
        // first we store them in a vector
    }
    int i;
    int n = v.size();
    for(i=n-1;i>-1;i--){
      l = cons_list(v[i], l);
    }
    infile.close(); 
 
    print_list(l);

    int userin,userchoice;
    std::cout<<"What do you want to search for in the list: "<<std::endl;
    std::cin>>userin;
    std::cout<<"What value do you want to replace it with? "<<std::endl;
    std::cin>>userchoice;

    if(replace_list(userin,userchoice, l, true) == true){
        std::cout<<"You replaced "<<userin<<" with "<<userchoice<<std::endl;
    }
    else{
        std::cout<<userin<<" couldn't be replaced"<<std::endl;
    }
    

    print_list(l);
    deallocate_list(l);
}