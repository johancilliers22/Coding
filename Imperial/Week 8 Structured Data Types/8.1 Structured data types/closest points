#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <fstream>
#include <cstdlib>
#include <algorithm>
 
struct Point{
    double x;
    double y;
};
 
double distance_points(Point p1, Point p2){
    return std::sqrt(std::pow((p1.x - p2.x), 2) + std::pow((p1.y - p2.y), 2));
}
 
std::string point_to_s(Point p){
    return "(" + std::to_string(p.x) + ", " + std::to_string(p.y) + ")";
}
 
// idxp1 and idxp2 are output parameters
// after the function call they will contain
// the indices of the two closest points in vp
// if vp contains two points or more
// (otherwise they will just contain uninitialised values)
 
void closest_points(const std::vector<Point>& vp, int& idxp1, int& idxp2){
    // TODO:
    // complete this function
    // (make use of function distance_points)
    int n = vp.size();
    int dis;
    int k=0;
    Point pone;
    Point ptwo;
    std::vector<double> distance;
    std::vector<std::string> c1;
    std::vector<std::string> c2;
    for(int i=0;n>i;i++){
      for(int k=0;n>k;k++){
        if(k==i){
        }
        if(k!=i){
            double dis = distance_points(vp[i], vp[k]);
            //std::cout<<dis<<std::endl;
            //std::cout<<point_to_s(vp[i])<<std::endl;
            //std::cout<<point_to_s(vp[k])<<std::endl;
            c1.push_back(point_to_s(vp[i]));
            c2.push_back(point_to_s(vp[k]));
            distance.push_back(dis);
        }
      }
    }
    double min = *min_element(distance.begin(),distance.end());
    // std::cout << min << std::endl;
    std::vector<double>::iterator it = std::find(distance.begin(), distance.end(), min);
    int index = std::distance(distance.begin(), it);
    //std::cout<<index<<std::endl;
    std::cout<<c1[index];
    std::cout<<c2[index]<<std::endl;
}
 
int main(){
 
    // TODO:
    // read the points from the file
    // and store them in vector points
    std::ifstream infile;
    infile.open("points.txt");
 
    if(!infile.is_open()){
        std::cout << "error opening file" << std::endl;
        return EXIT_FAILURE;
    }
 
    std::vector<Point> points;
    Point tmp;
 
    while(infile >> tmp.x >> tmp.y){
        points.push_back(tmp);
    }
    //std::cout<<point_to_s(points[1])<<std::endl;
    infile.close();
    if(points.size() == 0){
        std::cout << "there are no points in the file" << std::endl;
    }
    else if(points.size() == 1){
        std::cout << "there is only one point in the file" << std::endl;
    }
    else{
        int idxp1, idxp2;
        closest_points(points, idxp1, idxp2);
 
        // TODO: 
        // print the two points
    }
}